// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Habit {
  id String @id @default(uuid())
  name String
  dueDate DateTime?
  isPaused Boolean @default(false)
  habitTracking HabitTracking[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  userId String?
  user User? @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  @@map("habit")
}

// Model user with password
model User {
  id String @id @default(uuid())
  name String
  email String @unique
  password String
  hashedRefreshToken String?
  habitTracking HabitTracking[]
  tasks Task[]
  habits Habit[]
  @@map("user")
}

model HabitTracking {
  id Int @id @default(autoincrement())
  userId String
  user User? @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  habitId String
  habit Habit? @relation(fields: [habitId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  date DateTime
  points Int
  @@map("habit_tracking")
}

model Task {
  id String @id @default(uuid())
  title String
  dueDate DateTime?
  userId String
  user User @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  complexId Int?
  points Int?
  status String?
  complexity TasksComplexities? @relation(fields: [complexId], references: [id], onUpdate: SetNull, onDelete: SetNull)
  completedDate DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("task")
}

model TasksComplexities {
  id Int @id @default(autoincrement())
  name String
  points Int?
  tasks Task[]
  @@map("task_complexities")

}