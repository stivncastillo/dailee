# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type LogoutResponse {
  loggedOut: Boolean!
}

type User {
  id: String!
  name: String!
  email: String!
}

type NewTokensResponse {
  accessToken: String!
  refreshToken: String!
  user: User!
}

type SignResponse {
  accessToken: String!
  refreshToken: String!
  user: User!
}

type WeeklyPoints {
  points: Int!
  pointsAverage: Float!
}

type Habit {
  id: String!
  name: String!
  difficulty: String!
  due_date: DateTime
  start_date: DateTime
  target_frequency: Int
  current_frequency: Int
  points: Int
  is_paused: Boolean!
  created_at: DateTime!
  updated_at: DateTime!
  user_id: User!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Task {
  id: String!
  title: String!
  status: String!
  due_date: DateTime
  points: Int
  user_id: User!
  difficulty: String!
  completed_date: DateTime
  created_at: DateTime!
  updated_at: DateTime!
}

type Query {
  habits(where: HabitWhereInput, orderBy: [HabitOrderByWithRelationInput!], cursor: HabitWhereUniqueInput, take: Float, skip: Float): [Habit!]!
  habit(where: HabitWhereUniqueInput): Habit!
  user(where: UserWhereUniqueInput): User!
  tasks(where: TaskWhereInput, orderBy: [TaskOrderByWithRelationInput!], cursor: TaskWhereUniqueInput, take: Float, skip: Float): [Task!]!
  task(where: TaskWhereUniqueInput): Task!
  getWeeklyPoints(dateStart: DateTime!, dateEnd: DateTime!): WeeklyPoints!
}

input HabitWhereInput {
  id: StringFilter
  name: StringFilter
  difficulty: StringFilter
  user_id: StringFilter
  target_frequency: IntFilter
  current_frequency: IntFilter
  points: IntFilter
  due_date: DateTimeFilter
  start_date: DateTimeFilter
  is_paused: BoolFilter
  created_at: DateTimeFilter
  updated_at: DateTimeFilter
  AND: [HabitWhereInput!]
  OR: [HabitWhereInput!]
  NOT: [HabitWhereInput!]
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: String
  mode: QueryMode
}

enum QueryMode {
  default
  insensitive
}

input IntFilter {
  equals: Float
  lt: Float
  lte: Float
  gt: Float
  gte: Float
}

input DateTimeFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
}

input BoolFilter {
  equals: Boolean
  not: Boolean
}

input HabitOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  points: SortOrder
  due_date: SortOrder
  start_date: SortOrder
  difficulty: SortOrder
  target_frequency: SortOrder
  current_frequency: SortOrder
  is_paused: SortOrder
  created_at: SortOrder
}

enum SortOrder {
  asc
  desc
}

input HabitWhereUniqueInput {
  id: String
}

input UserWhereUniqueInput {
  id: String
}

input TaskWhereInput {
  id: StringFilter
  title: StringFilter
  user_id: StringFilter
  status: StringFilter
  difficulty: StringFilter
  points: IntFilter
  due_date: DateTimeFilter
  completed_date: DateTimeFilter
  created_at: DateTimeFilter
  updated_at: DateTimeFilter
  AND: [TaskWhereInput!]
  OR: [TaskWhereInput!]
  NOT: [TaskWhereInput!]
}

input TaskOrderByWithRelationInput {
  id: SortOrder
  title: SortOrder
  difficulty: SortOrder
  points: SortOrder
  due_date: SortOrder
  status: SortOrder
  completed_date: SortOrder
  created_at: SortOrder
}

input TaskWhereUniqueInput {
  id: String
}

type Mutation {
  createHabit(createHabitInput: CreateHabitInput!): Habit!
  updateHabit(updateHabitInput: UpdateHabitInput!): Habit!
  deleteHabit(deleteHabitInput: DeleteInput!): Habit!
  deleteHabits(deleteHabitsInput: DeleteManyInput!): Float!
  createUser(createUserInput: CreateUserInput!): User!
  createTask(createTaskInput: CreateTaskInput!): Task!
  updateTask(updateTaskInput: UpdateTaskInput!): Task!
  deleteTask(where: TaskWhereUniqueInput): Task!
  signup(signupInput: SignupInput!): SignResponse!
  signin(signinInput: SigninInput!): SignResponse!
  logout(id: String!): LogoutResponse!
  newTokens: NewTokensResponse!
}

input CreateHabitInput {
  name: String!
  difficulty: String!
  due_date: DateTime
  start_date: DateTime
  target_frequency: Int
  current_frequency: Int
  points: Int

  """If habit is paused it doesnt list as active habit"""
  is_paused: Boolean!
}

input UpdateHabitInput {
  name: String!
  difficulty: String!
  due_date: DateTime
  start_date: DateTime
  target_frequency: Int
  current_frequency: Int
  points: Int

  """If habit is paused it doesnt list as active habit"""
  is_paused: Boolean!
  id: String!
}

input DeleteInput {
  id: String!
}

input DeleteManyInput {
  ids: [String!]!
}

input CreateUserInput {
  name: String!
  email: String!
  password: String!
}

input CreateTaskInput {
  title: String!
  points: Int
  status: String! = "todo"
  due_date: DateTime
  difficulty: String!
  completed_date: DateTime
}

input UpdateTaskInput {
  title: String
  points: Int
  status: String = "todo"
  due_date: DateTime
  difficulty: String
  completed_date: DateTime
  id: String!
}

input SignupInput {
  name: String!
  email: String!
  password: String!
}

input SigninInput {
  email: String!
  password: String!
}