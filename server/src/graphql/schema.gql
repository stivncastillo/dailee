# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Habit {
  id: String!
  name: String!
  dueDate: DateTime
  isPaused: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type User {
  id: String!
  name: String!
}

type HabitTrackingAvgAggregate {
  points: Float
}

type HabitTrackingSumAggregate {
  points: Int
}

type HabitTrackingAggregate {
  _sum: HabitTrackingSumAggregate
  _avg: HabitTrackingAvgAggregate
}

type HabitTracking {
  id: String!
  date: DateTime!
  points: Int!
  habitId: Habit!
  userId: User!
}

type TasksComplexity {
  id: String!
  name: String!
  points: Int
}

type Task {
  id: String!
  title: String!
  status: String!
  dueDate: DateTime
  points: Int
  userId: User!
  complexId: TasksComplexity!
  completedDate: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Query {
  habits(isPaused: Boolean, dueDate: DateTime): [Habit!]!
  habit(id: String!): Habit!
  habitTrackings(dateStart: DateTime, dateEnd: DateTime): [HabitTracking!]!
  habitTracking(id: Float!): HabitTracking!
  habitTrackingsAggregate(dateStart: DateTime, dateEnd: DateTime): HabitTrackingAggregate
  user(id: Int!): User!
  tasks: [Task!]!
  task(id: Int!): Task!
}

type Mutation {
  createHabit(createHabitInput: CreateHabitInput!): Habit!
  updateHabit(updateHabitInput: UpdateHabitInput!): Habit!
  deleteHabit(deleteHabitInput: DeleteHabitInput!): Habit!
  deleteHabits(deleteHabitsInput: DeleteHabitsInput!): Float!
  createHabitTracking(createHabitTrackingInput: CreateHabitTrackingInput!): HabitTracking!
  updateHabitTracking(updateHabitTrackingInput: UpdateHabitTrackingInput!): HabitTracking!
  removeHabitTracking(deleteHabitTracking: DeleteHabitTrackingInput!): HabitTracking!
  createUser(createUserInput: CreateUserInput!): User!
  updateUser(updateUserInput: UpdateUserInput!): User!
  removeUser(id: Int!): User!
  createTask(createTaskInput: CreateTaskInput!): Task!
  updateTask(updateTaskInput: UpdateTaskInput!): Task!
  removeTask(id: Int!): Task!
}

input CreateHabitInput {
  """Name of habit"""
  name: String!
  dueDate: DateTime

  """If habit is paused it doesnt list as active habit"""
  isPaused: Boolean!
}

input UpdateHabitInput {
  name: String
  dueDate: DateTime
  isPaused: Boolean
  id: String!
}

input DeleteHabitInput {
  id: String!
}

input DeleteHabitsInput {
  ids: [String!]!
}

input CreateHabitTrackingInput {
  date: DateTime
  points: Int!
  habitId: String!
  userId: String!
}

input UpdateHabitTrackingInput {
  date: DateTime
  points: Boolean
  habitId: String
  userId: DateTime
  id: String!
}

input DeleteHabitTrackingInput {
  id: Float!
}

input CreateUserInput {
  """Name of habit"""
  name: String!
}

input UpdateUserInput {
  """Name of habit"""
  name: String
  id: Int!
}

input CreateTaskInput {
  title: String!
  points: Int
  status: String! = "todo"
  dueDate: DateTime
  userId: String!
  complexId: Int!
  completedDate: DateTime
}

input UpdateTaskInput {
  title: String
  points: Int
  status: String = "todo"
  dueDate: DateTime
  userId: String
  complexId: Int
  completedDate: DateTime
  id: Int!
}